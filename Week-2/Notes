R Programming Notes | John Hopkins | Coursera | Week-2

"Control Structures"

If, else 
Example:
if(<condition>) {
	## do something
} else {
	## do something else
}

Another example:
if(<condition_1>) {
	## do something
} else if(<condition_2>)
	## do something different
} else {
	do something else
}

For loop
Example:
for(i in 1:10) {
	print(i)
}
List of examples:
> x <- c("a", "b", "c", "d")
> for(i in 1:4) {
+ print(x[i])
+ }
[1] "a"
[1] "b"
[1] "c"
[1] "d"

> for(i in seq_along(x)) {
+ print(x[i])
+ }
[1] "a"
[1] "b"
[1] "c"
[1] "d"

> for(letter in x) {
+ print(letter)
+ }
[1] "a"
[1] "b"
[1] "c"
[1] "d"

> for(i in 1:4) print(x[i])
[1] "a"
[1] "b"
[1] "c"
[1] "d"

Nested for Loops
Example:
> x <- matrix(1:6, 2, 3)
> x
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

> for(i in seq_len(nrow(x))) {
+ for(j in seq_len(ncol(x))) {
+ print(x[i, j])
+ }
+ }
[1] 1
[1] 3
[1] 5
[1] 2
[1] 4
[1] 6

While Loop
While loops begin by testing a condition, if it is true, then thes execute the loop body. 
Once the loop body is executed, the condition is tested again, and so forth.
Example:
> count <- 0
> while(count < 10) { 
+ print(count)
+ count <- count + 1
+ }
[1] 0
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9

Example:
> z <- 5
> while(z >= 3 && z <=10) {
+ print(z)
+ coin <- rbinom(1, 1, 0.5)
+ if(coin == 1) { ## random walk
+ z <- z + 1
+ } else {
+ z <- z - 1
+ }
+ }
[1] 5
[1] 4
[1] 3
Note: Conditions are always evaluate from left to right


Repeat and Break
Repeat initiates an infinite loop. The only way to exit repeat loop is to call break
Example:
> x0 <- 1
> tol <- 1e-8
+
> repeat {
+ x1 <- computeEstimate()
+
+ if(abs(x1 - x0) < tol) {
+ break
+ } else {
+ x0 <- x1
+ }
+ } 

Next, Return
Next is used to skip an iteration of loop
Example
> for(i in 1:100) {
+ if(i <= 20) {
+ ## skip the first 20 iterations
+ next
+ }
+ ## do something here
+ }
Note: Return signals that a function should exit and return a given value

#Control structures mentioned here are primarily used for writing programs; for command-line interactive work the *apply functions are mor useful.

"Functions"
Creating a Function -> function(), For example:
f <- function(<argument>) {
	## do something interesting
}

#Functions can be passed as <arguments> to other functions and also they can be <nested>.

Argument Matching: R functions arguments can be matched positionally or by name. 
So the following call to 'sd' are all equivalent:
> mydata <- rnorm(100)
> sd(mydata)
[1] 1.025642
or > sd(x = mydata)
[1] 1.025642
or > sd(x = mydata, na.rm = FALSE)
[1] 1.025642
or > sd(na.rm = FALSE, x = mydata)
[1] 1.025642
or > sd(na.rm = FALSE, mydata)
[1] 1.025642

Note: Functions arguments can also be partially matched, which is useful for an intercative work.

Lazy Evaluation: Arguments to functions are evaluated lazily, f(a, b) ... f(a)
"..." Argument when extending another function and you dont want to copy entire
For example:
> f <- function(a, b) {
+ a*2
+ }
> f(2)
[1] 4
 
Lexical Scoping: Assign a value which is free variable, lets say 'y'
Example:
> make.power <- function(n) {
+ pow <- function(x){
+ x^n
+ }
+ pow
+ }
> cube <- make.power(3)
> square <- make.power(2)
> cube(3)
[1] 27
> square(3)
[1] 9

Exploring a function closure, which what is in environment?
Example for cube:
> ls(environment(cube))
[1] "n"   "pow"
> get("n", environment(cube))
[1] 3

Similarly for square:
> ls(environment(square))
[1] "n"   "pow"
> get("n", environment(square))
[1] 2

Dynamic Scoping: g(x)
Codin Standard 
Text file/editor
Indenting (for readability)

Lexiccal Vs Dynamic Scoping
Example:
> y <- 10
> f <- function(x) {
+ y <- 2
+ y^2 + g(x)
+ }
> g <- function(x) {
+ x*y
+ }
> f(3)
[1] 34

[Hint: y2 + x*y which means  2^2 + 10^3 = 4+30= 34]

Detailed Explanation: With Lexical scoping the value of y in the function g is looked up in the environment 
in which the function was defined, in this case the global environment, so the value of y is 10

With Dynamic scoping, the value of y is looked up in the environment, called as "calling environment". 
In R the calling environment is known as the "parent frame". In this case, the value of y would be 2.

Date in R
Dates uses Date Class, can be written: as.Date() function
For example:
> x <- as.Date("1991-1-12")
> x
[1] "1991-01-12"

Time in R
It uses POSIXct class: It is useful when you want to store time in dataframe 
It also uses POSIXlt class: It is useful to store bunch of information like day of the week, day of the year, month etc.

For example checking current time:
> x <- Sys.time()
> x
[1] "2020-07-21 12:45:01 CEST"

> p <- as.POSIXlt(x)
> names(unclass(p))
 [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"  
 [9] "isdst"  "zone"   "gmtoff"
> p$sec
[1] 1.063392
> p$min
[1] 45
> p$hour
[1] 12
> p$mday
[1] 21

Operations on Dates and Times
For example:
> x <- as.Date("2020-08-21")
> y <- as.Date("2020-07-21")
> x-y
Time difference of 31 days

§Quiz-Week-2

#1 Returned Value
> cube <- function(x, n) {
+ x^3
+ }

> cube(3)
Output
[1] 27

#2 Warning in following function:
> x <- 1:10
> if(x > 5) {
+ x <- 0
+ }
Warning message:
In if (x > 5) { :
  the condition has length > 1 and only the first element will be used

-'x' is a vector of length 10 and 'if' can only test a  single logical statement.

#3 Returned Value
> f <- function(x) {
+ g <- function(y) {
+ y + z
+ }
+ z <- 4
+ x + g(x)
+ }
> z <- 10
> f(3)
[1] 10

#4 Value of y after evaluating the expression below:
> x <- 5
> y <- if(x < 3) {
+ NA
+ } else {
+ 10
+ }
> y
[1] 10

#5 R function - Which is a free varible symbol?
> h <-  function(x, y = NULL, d = 3L) {
+ z <- cbind(x, d)
+ if(!is.null(y))
+ z <- z + y 
+ else 
+ z <- z + f
+ g <- x + y / z
+ if(d == 3L)
+ return(g)
+ g <- g +10
+ g
+ }

-'f' is a free varibale in the above R function.

#6 A collection of symbols/value pairs  is an environment in R.

#7 R langugage use "Lexical Scoping" rule for resolving free variable.

#8 How Free varibale are resolved? - The values of free variables are searched for in the environment in which the function was defined.

#9 All object must be stored in memory is one of the consequences of the scoping rules used in R.

#10 Parent Frame: It is the environment in which a function was called.

§Programming Assignment 1

***********************************************************************************************
Initialisation and configure the environment.

pollutantmean.R

rm(list = ls())
setwd("C:/Users/User/Desktop/Coursera/rprog_data_specdata")

#Directory is a character vector of length 1 indicating location of csv files
#Pollutant is a character vector of length 1 indicating the name of pollutants
#Id is an integer vector indicate to read the ID numbers to be used
#Returns the mean of the pollutant across all monitor list in the 'id' vector (ignoring NAs)
 
pollutantmean <- function(directory, pollutant, id = 1:332) {

#Define a vector to keep values
vector <- c()

#Define a loop over IDs
for(i in id){

#Define a path
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", i), ".csv", sep = "")

#Load the data and read files        
full_data <- read.csv(path)

#Select the Coloumn of Interest
data <- full_data[pollutant]

#Append a vector and ignore the missing values i.e. NAs
vector <- c(vector, data[!is.na(data)])
}
#Return the mean values to 3 decimal places    
round(mean(vector),3)
}

***********************************************************************************************

#1 Return value of the following call to pollutantmean("specdata", "sulfate", 1:10)
Output
[1] 4.064

#2 Return value of the following call to pollutantmean("specdata", "nitrate", 70:72)
Output
[1] 1.706

#3 Return value of the following call to pollutantmean("specdata", "sulfate", 34)
Output
[1] 1.477

#4 Return value of the following call to pollutantmean("specdata", "nitrate")
Output
[1] 1.703

***********************************************************************************************
~complete.R

rm(list = ls())
setwd("C:/Users/User/Desktop/Coursera/rprog_data_specdata")

#Directory is a character vector of length 1 indicating location of csv files
#Id is an integer vector indicate to read the ID numbers to be used
#Returns a data frame of the form:
#Id nobs
#1  117
#2  1041
# ... where 'id' is the monitor ID number and 'nobs' is the number of complete cases
 
complete <- function(directory, id = 1:332) {

#Define or initialize varibales
ids <- vector()
nobs = vector()

#Define a loop over IDs
for(i in id){

#Define a path
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", i), ".csv", sep = "")

#Load the data and read files        
full_data <- read.csv(path)

#Store the ID
ids <- c(ids, i)

#Count of Complete Cases
complete_cases <- full_data[complete.cases(full_data),]
nobs <- c(nobs, nrow(complete_cases))
}

#Return the data frame
return(data.frame(cbind(id, nobs)))
}

***********************************************************************************************
#5 What value is printed at end of the following code?

cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
Output
[1] 228 148 124 165 104 460 232

#6 What value is printed at end of the following code?
cc <- complete("specdata", 54)
print(cc$nobs)
Output
[1] 219

#7 What value is printed at end of the following code?
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
Output
[1] 711 135  74 445 178  73  49   0 687 237

Incase you get wrong results with #7, Here is the solution suggestion from Coursera study forum:

> vstr <- "3.5.1"  #This choice works, you do not need to have this version of R on your computer
> RNGversion(vstr)  #do this once in your R session before taking any quiz questions using the sample function
#This "tells" R to run the random number generators from that version of R
#It returns a warning saying that version of sample is not "best"

Warning message:
In RNGkind("Mersenne-Twister", "Inversion", "Rounding") :
  non-uniform 'Rounding' sampler used

***********************************************************************************************
~corr.R

rm(list = ls())
setwd("C:/Users/User/Desktop/Coursera/rprog_data_specdata")

#Directory is a character vector of length 1 indicating location of csv files
#Threshold' is a numeric vector of length 1 indicating the no, of completely observed 
#Observations (on all variables) required to compute the correlation between
#Nitrate and Sulfate; the default is 0
 
corr <- function(directory, threshold = 0) {

#Define or initialize varibales
correlations <- c()

#Define a path
files <- (Sys.glob("specdata//*.csv"));

#Define a loop over IDs
for(i in files){

#Load the data and read files  
file_data <- read.csv(i, sep = ",");

#Count of Complete Cases
complete_cases <- file_data[complete.cases(file_data),];
if (nrow(complete_cases) > threshold) {
correlations <- c(correlations, cor(complete_cases$sulfate, complete_cases$nitrate))
}
}
return(correlations)
}

***********************************************************************************************

#8 What value is printed at end of the following code?
cr <- corr("specdata")                
cr <- sort(cr)                
set.seed(868)                
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
Output
[1]  0.2688  0.1127 -0.0085  0.4586  0.0447

#9 What value is printed at end of the following code?
cr <- corr("specdata", 129)                
cr <- sort(cr)                
n <- length(cr)                
set.seed(197)                
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
Output
[1] 243.0000   0.1384   0.2996  -0.0648  -0.1063  -0.1405

#10 What value is printed at end of the following code?
cr <- corr("specdata", 2000)                
n <- length(cr)                
cr <- corr("specdata", 1000)                
cr <- sort(cr)
print(c(n, round(cr, 4)))
Output
[1]  0.0000 -0.0190  0.0419  0.1901
